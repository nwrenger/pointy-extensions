name: Validate Extension Entry

on:
  pull_request_target:
    branches:
      - main
    paths:
      - extensions.json

jobs:
  extension-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
      - uses: actions/setup-node@v2
      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const https = require('https');
            const errors = [];
            const warnings = [];
            const addError = msg => { errors.push(`:x: ${msg}`); console.log('Error: ' + msg); };
            const addWarning = msg => { warnings.push(`:warning: ${msg}`); console.log('Warning: ' + msg); };
            const MAX_REDIRECTS = 5;

            // Skip if no new lines added
            if (context.payload.pull_request.additions <= context.payload.pull_request.deletions) return;

            if (context.payload.pull_request.changed_files > 1) {
              addError('You modified files other than `extensions.json`.');
            }

            if (!context.payload.pull_request.maintainer_can_modify) {
              addWarning('Maintainers of this repo should be allowed to edit this pull request. This speeds up the approval process.');
            }

            if (!context.payload.pull_request.body.includes('I have added a license file to my project.')) {
              addError('You did not follow the pull request template');
            }

            // Load extensions.json
            let extensions;
            try {
              extensions = JSON.parse(fs.readFileSync('extensions.json', 'utf8'));
            } catch (e) {
              addError('Could not parse extensions.json: ' + e.message);
              return;
            }

            const extension = extensions[extensions.length - 1];

            // Validate entry fields
            const validKeys = ['id', 'name', 'author', 'version', 'description', 'latest_url'];
            validKeys.forEach(key => {
              if (!extension.hasOwnProperty(key)) addError(`Missing required property: ${key}`);
            });
            Object.keys(extension).forEach(key => {
              if (!validKeys.includes(key)) addError(`Invalid property in extension entry: ${key}`);
            });

            if (extension.id?.toLowerCase().includes('pointy')) {
              addError(`Please don't use the word \`pointy\` in the extension ID. The ID is used for your extension's folder so keeping it short and simple avoids clutter and helps with sorting.`);
            }
            if (extension.id?.toLowerCase().endsWith('extension')) {
              addError(`Please don't use the word \`extension\` in the extension ID. The ID is used for your extension's folder so keeping it short and simple avoids clutter and helps with sorting.`);
            }
            if (extension.id && !/^[a-z0-9-_]+$/.test(extension.id)) {
              addError('The extension ID is not valid. Only alphanumeric lowercase characters and dashes are allowed.');
            } else if (extension.name?.toLowerCase().includes('pointy')) {
              addError(`Please don't use the word \`Pointy\` in your extension name since it's redundant and adds clutter to the extension list.`);
            }
            if (extension.name?.toLowerCase().endsWith('extension')) {
              addError(`Please don't use the word \`Exte-nsion\` in the extension name since it's redundant and adds clutter to the extension list.`);
            }

            if (extension.author && /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/.test(extension.author)) {
              addWarning(`We generally discourage including your email addresses in the \`author\` field.`);
            }

            if (extension.description?.toLowerCase().includes('extension')) {
              addError('Please don\'t include `Extension` in the extension description');
            }
            if (extension.description?.toLowerCase().includes('this extension') || extension.description?.toLowerCase().includes('this is a extension') || extension.description?.toLowerCase().includes('this extension allows')) {
              addWarning('Avoid including sentences like `This is a extension that does` in your description');
            }

            if (extension.description?.length > 250) {
              addError(`Your extension has a long description. Users typically find it difficult to read a very long description, so you should keep it short and concise.`);
            }

            if (extension.id && extensions.filter(p => p.id === extension.id).length > 1) {
              addError(`There is already a extension with the id \`${extension.id}\`.`);
            }
            if (extension.name && extensions.filter(p => p.name === extension.name).length > 1) {
              addError(`There is already a extension with the name \`${extension.name}\`.`);
            }
            if (extension.latest_url && extensions.filter(p => p.latest_url === extension.latest_url).length > 1) {
              addError(`There is already a entry pointing to the \`${extension.latest_url}\` url.`);
            }

            const removedExtensions = JSON.parse(fs.readFileSync('extensions-removed.json', 'utf8'));

            if (extension.id && removedExtensions.filter(e => e.id === extension.id).length > 1) {
              addError(`Another extension used to exist with the id \`${extension.id}\`. To avoid issues for users that still have the old extension installed using this extension ID is not allowed`);
            }

            if (extension.name && removedExtensions.filter(e => e.name === extension.name).length > 1) {
              addWarning(`Another extension used to exist with the name \`${extension.name}\`. To avoid confussion we recommend against using this name.`);
            }

            // Require latest_url
            if (!extension.latest_url) {
              addError('Empty "latest_url" property.');
            } else {
              // Helper to fetch JSON over HTTPS
              const fetchJson = (url, redirects = 0) => new Promise((resolve, reject) => {
                if (redirects > MAX_REDIRECTS) {
                  return reject(new Error('Too many redirects'));
                }
                https.get(url, res => {
                  const { statusCode, headers } = res;
                  let data = '';

                  // Handle 2xx OK
                  if (statusCode >= 200 && statusCode < 300) {
                    res.on('data', chunk => data += chunk);
                    res.on('end', () => {
                      try {
                        resolve(JSON.parse(data));
                      } catch (err) {
                        reject(new Error('Invalid JSON: ' + err.message));
                      }
                    });
                  }
                  // Handle redirects (3xx)
                  else if (statusCode >= 300 && statusCode < 400 && headers.location) {
                    console.log(`Redirecting (${statusCode}) to ${headers.location}`);
                    resolve(fetchJson(headers.location, redirects + 1));
                  }
                  else {
                    reject(new Error(`HTTP Status ${statusCode}`));
                  }
                }).on('error', reject);
              });

              // Fetch and validate latest.json
              try {
                const latest = await fetchJson(extension.latest_url);
                // Version match
                if (latest.version !== extension.version) {
                  addError(`Version mismatch: latest.json has version ${latest.version}, expected ${extension.version}.`);
                }
                // Required platform artifacts
                const assets = ['darwin-aarch64', 'darwin-x86_64', 'linux-x86_64', 'windows-x86_64'];
                assets.forEach(asset => {
                  if (!latest.assets[asset]) {
                    addError(`latest.json missing asset URL for '${asset}'.`);
                  }
                });
              } catch (e) {
                addError('Unable to fetch or parse latest.json: ' + e.message);
              }
            }

            // Post errors/warnings comment if needed
            if (errors.length > 0 || warnings.length > 0) {
              let message = [`#### Hello!\n`]
              message.push(`**I found the following issues in your extension submission**\n`);

              if (errors.length > 0) {
                message.push(`**Errors:**\n`);
                message = message.concat(errors);
                message.push(`\n---\n`);
              }
              if (warnings.length > 0) {
                message.push(`**Warnings:**\n`);
                message = message.concat(warnings);
                message.push(`\n---\n`);
              }

              message.push(`<sup>This check was done automatically. Do <b>NOT</b> open a new PR for re-validation. Instead, to trigger this check again, make a change to your PR and wait a few minutes, or close and re-open it.</sup>`);

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message.join('\n'),
              });
            }

            const labels = [];

            if (errors.length > 0) {
              labels.push("Validation failed");
              core.setFailed("Failed to validate extension");
            }

            if (errors.length === 0) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                title: `Add extension: ${extension.name}`
              });

              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              const commentAuthors = comments.data.map(c => c.user.login);

              if (!commentAuthors.includes("nwrenger")) {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  assignees: ['nwrenger']
                });
              }

              if (!context.payload.pull_request.labels.some(label => label.name === 'Changes requested')) {
                labels.push("Ready for review");
              }
            }
            if (context.payload.pull_request.labels.some(label => label.name === 'Changes requested')) {
              labels.push('Changes requested');
            }
            if (context.payload.pull_request.labels.some(label => label.name === 'Requires author rebase')) {
              labels.push('Requires author rebase');
            }
            if (context.payload.pull_request.labels.some(label => label.name === 'Installation not recommended')) {
              labels.push('Installation not recommended');
            }
            if (context.payload.pull_request.labels.some(label => label.name === 'Changes made')) {
              labels.push('Changes made');
            }
            if (context.payload.pull_request.labels.some(label => label.name === 'Skipped code scan')) {
              labels.push('Skipped code scan');
            }
            labels.push('extension');

            if (labels.length) {
              await github.rest.issues.setLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels,
              });
            }
    permissions:
      contents: read
      issues: write
      pull-requests: write
